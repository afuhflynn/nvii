// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  password         String?         @db.Text
  accounts         Account[]
  sessions         Session[]
  Device           Device[]
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectAccess    ProjectAccess[]
  accessToProjects Project[]       @relation("ProjectAccess")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Device {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  userId    String
  key       String    @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  Project   Project[]

  @@map("devices")
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  key       String   @default(cuid())
  user      User     @relation("ProjectOwner", fields: [userId], references: [id], onDelete: Cascade)
  deviceId  String
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  content   Json?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  havingAccess  User[]          @relation("ProjectAccess")
  ProjectAccess ProjectAccess[]

  @@unique([userId, name])
  @@map("projects")
}

// Join table for project access
model ProjectAccess {
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  assignedAt DateTime @default(now())

  @@id([projectId, userId])
  @@map("project_access")
}
